<?php// *************************************************************************//// Project      : SCET for Joomla                                           //// @package     : com_scet                                                  //// @file        : /admin/controllers/events.php                             //// @implements  : Class SCETControllerEvents                                //// @description : Controller for editing the Events-List                    //// Version      : 2.5.19                                                     //// *************************************************************************//// No direct access.defined('_JEXEC') or die; jimport('joomla.application.component.controlleradmin'); // Eventlist controller class.class SCETControllerEvents extends JControllerAdmin{	// constructor (registers additional tasks to methods)	// @return void	function __construct()	{		parent::__construct();		// Register Extra tasks		$this->registerTask( 'isPublic'      , 'switchPublicity');		$this->registerTask( 'isUnpublic'    , 'switchPublicity');		$this->registerTask( 'isMandatory'   , 'switchMandatority');		$this->registerTask( 'isNotMandatory', 'switchMandatority');    }    	/**	 * Proxy for getModel.	 * @since	1.6	 */	public function getModel($name = 'Event', $prefix = 'SCETModel', 							 $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}		    public function switchPublicity()	{		$this->setRedirect( 'index.php?option=com_scet' );		// Initialize variables		$db			=& JFactory::getDBO();		$user		=& JFactory::getUser();		$cid		= JRequest::getVar( 'cid', array(), 'post', 'array' );		$task		= JRequest::getCmd( 'task' );		$publish	= ($task == 'isPublic');		$n			= count( $cid );		if (empty( $cid ))         {			return JError::raiseWarning( 500, JText::_( 'COM_SCET_MSG_NO_ITEMS_SELECTED' ) );		}		JArrayHelper::toInteger( $cid );		$cids = implode( ',', $cid );		$query = 'UPDATE #__scet_events'		       . ' SET publicevent = ' . (int) $publish		       . ' WHERE id IN ( '. $cids .' )';		$db->setQuery( $query );		if (!$db->query())         {			return JError::raiseWarning( 500, $row->getError() );		}		$this->setMessage( JText::sprintf( $publish ? 'COM_SCET_MSG_ITEMS_PUBLISHED' : 'COM_SCET_MSG_ITEMS_UNPUBLISHED', $n ) );	}		public function switchMandatority()	{		$this->setRedirect( 'index.php?option=com_scet' );		// Initialize variables		$db			 =& JFactory::getDBO();		$user		 =& JFactory::getUser();		$cid		 = JRequest::getVar( 'cid', array(), 'post', 'array' );		$task		 = JRequest::getCmd( 'task' );		$isMandatory = ($task == 'isMandatory');		$n	  		 = count( $cid );		if (empty( $cid ))         {			return JError::raiseWarning( 500, JText::_( 'COM_SCET_MSG_NO_ITEMS_SELECTED' ) );		}		JArrayHelper::toInteger( $cid );		$cids = implode( ',', $cid );		$query = 'UPDATE #__scet_events'		       . ' SET mandatory = ' . (int) $isMandatory		       . ' WHERE id IN ( '. $cids .' )';		$db->setQuery( $query );		if (!$db->query())         {			return JError::raiseWarning( 500, $row->getError() );		}		$this->setMessage( JText::sprintf( $publish ? 'COM_SCET_MSG_ITEMS_PUBLISHED' : 'COM_SCET_MSG_ITEMS_UNPUBLISHED', $n ) );	}       public function setDbField($fieldname, $state)    {		$this->setRedirect( 'index.php?option=com_scet' );		$cid = JRequest::getVar( 'cid', array(), 'post', 'array' );		if (empty( $cid ))         {			return JError::raiseWarning( 500, JText::_( 'COM_SCET_MSG_NO_ITEMS_SELECTED' ) );		}        return $this->getModel()->setDBField($fieldname, $state, $cid);    }      public function setPublicity_publish()    {        $this->setDbField('publicevent', '1');    }      public function setPublicity_unpublish()    {        $this->setDbField('publicevent', '0');    }    public function setMandatority_publish()    {        $this->setDbField('mandatory', '1');    }      public function setMandatority_unpublish()    {        $this->setDbField('mandatory', '0');    }    }